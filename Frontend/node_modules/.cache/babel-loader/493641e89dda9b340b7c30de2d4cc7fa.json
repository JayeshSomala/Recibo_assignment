{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayes\\\\OneDrive\\\\Desktop\\\\Recibo\\\\react-hook-form-crud-example\\\\src\\\\outlet\\\\AddEdit.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { alertService, outletService } from '../_services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddEdit(_ref) {\n  _s();\n\n  var _errors$Name, _errors$Cost;\n\n  let {\n    history,\n    match\n  } = _ref;\n  const {\n    id\n  } = match.params;\n  const isAddMode = !id; // form validation rules \n\n  const validationSchema = Yup.object().shape({\n    Name: Yup.string().required('Name is required'),\n    Cost: Yup.number().required('Cost is required')\n  }); // functions to build form returned by useForm() hook\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    errors,\n    formState\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n\n  function onSubmit(data) {\n    return isAddMode ? createoutlet(data) : updateoutlet(id, data);\n  }\n\n  function createoutlet(data) {\n    return outletService.create(data).then(() => {\n      alertService.success('Outlet added', {\n        keepAfterRouteChange: true\n      });\n      history.push('.');\n    }).catch(alertService.error);\n  }\n\n  function updateoutlet(id, data) {\n    return outletService.update(id, data).then(() => {\n      alertService.success('Outlet updated', {\n        keepAfterRouteChange: true\n      });\n      history.push('..');\n    }).catch(alertService.error);\n  }\n\n  useEffect(() => {\n    if (!isAddMode) {\n      // get outlet and set form fields\n      outletService.getById(id).then(outlet => {\n        const fields = ['Name', 'Cost'];\n        fields.forEach(field => setValue(field, outlet[field]));\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    onReset: reset,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isAddMode ? 'Add outlet' : 'Edit outlet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group col-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Outlet Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          Name: \"Name\",\n          type: \"text\",\n          ref: register,\n          className: `form-control ${errors.firstName ? 'is-invalid' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$Name = errors.Name) === null || _errors$Name === void 0 ? void 0 : _errors$Name.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group col-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          Name: \"Cost\",\n          type: \"number\",\n          ref: register,\n          className: `form-control ${errors.Cost ? 'is-invalid' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$Cost = errors.Cost) === null || _errors$Cost === void 0 ? void 0 : _errors$Cost.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: formState.isSubmitting,\n        className: \"btn btn-primary\",\n        children: [formState.isSubmitting && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"spinner-border spinner-border-sm mr-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 48\n        }, this), \"Save\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: isAddMode ? '.' : '..',\n        className: \"btn btn-link\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddEdit, \"6Pm8byjinSpjTcYCjRkkIqVR6r4=\", false, function () {\n  return [useForm];\n});\n\n_c = AddEdit;\nexport { AddEdit };\n\nvar _c;\n\n$RefreshReg$(_c, \"AddEdit\");","map":{"version":3,"sources":["C:/Users/jayes/OneDrive/Desktop/Recibo/react-hook-form-crud-example/src/outlet/AddEdit.jsx"],"names":["React","useEffect","Link","useForm","yupResolver","Yup","alertService","outletService","AddEdit","history","match","id","params","isAddMode","validationSchema","object","shape","Name","string","required","Cost","number","register","handleSubmit","reset","setValue","errors","formState","resolver","onSubmit","data","createoutlet","updateoutlet","create","then","success","keepAfterRouteChange","push","catch","error","update","getById","outlet","fields","forEach","field","firstName","message","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\n\nimport { alertService, outletService } from '../_services';\n\nfunction AddEdit({ history, match }) {\n    const { id } = match.params;\n    const isAddMode = !id;\n\n    // form validation rules \n    const validationSchema = Yup.object().shape({\n        Name: Yup.string()\n            .required('Name is required'),\n        Cost: Yup.number()\n            .required('Cost is required'),\n    });\n\n    // functions to build form returned by useForm() hook\n    const { register, handleSubmit, reset, setValue, errors, formState } = useForm({\n        resolver: yupResolver(validationSchema)\n    });\n\n    function onSubmit(data) {\n        return isAddMode\n            ? createoutlet(data)\n            : updateoutlet(id, data);\n    }\n\n    function createoutlet(data) {\n        return outletService.create(data)\n            .then(() => {\n                alertService.success('Outlet added', { keepAfterRouteChange: true });\n                history.push('.');\n            })\n            .catch(alertService.error);\n    }\n\n    function updateoutlet(id, data) {\n        return outletService.update(id, data)\n            .then(() => {\n                alertService.success('Outlet updated', { keepAfterRouteChange: true });\n                history.push('..');\n            })\n            .catch(alertService.error);\n    }\n\n    useEffect(() => {\n        if (!isAddMode) {\n            // get outlet and set form fields\n            outletService.getById(id).then(outlet => {\n                const fields = ['Name', 'Cost'];\n                fields.forEach(field => setValue(field, outlet[field]));\n            });\n        }\n    }, []);\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} onReset={reset}>\n            <h1>{isAddMode ? 'Add outlet' : 'Edit outlet'}</h1>\n            <div className=\"form-row\">\n                <div className=\"form-group col-5\">\n                    <label>Outlet Name</label>\n                    <input Name=\"Name\" type=\"text\" ref={register} className={`form-control ${errors.firstName ? 'is-invalid' : ''}`} />\n                    <div className=\"invalid-feedback\">{errors.Name?.message}</div>\n                </div>\n                <div className=\"form-group col-5\">\n                    <label>Price</label>\n                    <input Name=\"Cost\" type=\"number\" ref={register} className={`form-control ${errors.Cost ? 'is-invalid' : ''}`} />\n                    <div className=\"invalid-feedback\">{errors.Cost?.message}</div>\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <button type=\"submit\" disabled={formState.isSubmitting} className=\"btn btn-primary\">\n                    {formState.isSubmitting && <span className=\"spinner-border spinner-border-sm mr-1\"></span>}\n                    Save\n                </button>\n                <Link to={isAddMode ? '.' : '..'} className=\"btn btn-link\">Cancel</Link>\n            </div>\n        </form>\n    );\n}\n\nexport { AddEdit };"]},"metadata":{},"sourceType":"module"}