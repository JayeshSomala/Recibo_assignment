{"ast":null,"code":"// import { Role } from './'\n// export function configureFakeBackend() {\n//     // array in local storage for user records\n//     let users = JSON.parse(localStorage.getItem('users')) || [{ \n//         id: 1,\n//         title: 'Mr',\n//         firstName: 'Joe',\n//         lastName: 'Bloggs',\n//         email: 'joe@bloggs.com',\n//         role: Role.User,\n//         password: 'joe123'\n//     }];\n//     // monkey patch fetch to setup fake backend\n//     let realFetch = window.fetch;\n//     window.fetch = function (url, opts) {\n//         return new Promise((resolve, reject) => {\n//             // wrap in timeout to simulate server api call\n//             setTimeout(handleRoute, 500);\n//             function handleRoute() {\n//                 const { method } = opts;\n//                 switch (true) {\n//                     case url.endsWith('/users') && method === 'GET':\n//                         return getUsers();\n//                     case url.match(/\\/users\\/\\d+$/) && method === 'GET':\n//                         return getUserById();\n//                     case url.endsWith('/users') && method === 'POST':\n//                         return createUser();\n//                     case url.match(/\\/users\\/\\d+$/) && method === 'PUT':\n//                         return updateUser();\n//                     case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n//                         return deleteUser();\n//                     default:\n//                         // pass through any requests not handled above\n//                         return realFetch(url, opts)\n//                             .then(response => resolve(response))\n//                             .catch(error => reject(error));\n//                 }\n//             }\n//             // route functions\n//             function getUsers() {\n//                 return ok(users);\n//             }\n//             function getUserById() {\n//                 let user = users.find(x => x.id === idFromUrl());\n//                 return ok(user);\n//             }\n//             function createUser() {\n//                 const user = body();\n//                 if (users.find(x => x.email === user.email)) {\n//                     return error(`User with the email ${user.email} already exists`);\n//                 }\n//                 // assign user id and a few other properties then save\n//                 user.id = newUserId();\n//                 user.dateCreated = new Date().toISOString();\n//                 delete user.confirmPassword;\n//                 users.push(user);\n//                 localStorage.setItem('users', JSON.stringify(users));\n//                 return ok();\n//             }\n//             function updateUser() {\n//                 let params = body();\n//                 let user = users.find(x => x.id === idFromUrl());\n//                 // only update password if included\n//                 if (!params.password) {\n//                     delete params.password;\n//                 }\n//                 // don't save confirm password\n//                 delete params.confirmPassword;\n//                 // update and save user\n//                 Object.assign(user, params);\n//                 localStorage.setItem('users', JSON.stringify(users));\n//                 return ok();\n//             }\n//             function deleteUser() {\n//                 users = users.filter(x => x.id !== idFromUrl());\n//                 localStorage.setItem('users', JSON.stringify(users));\n//                 return ok();\n//             }\n//             // helper functions\n//             function ok(body) {\n//                 resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) });\n//             }\n//             function error(message) {\n//                 resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) });\n//             }\n//             function idFromUrl() {\n//                 const urlParts = url.split('/');\n//                 return parseInt(urlParts[urlParts.length - 1]);\n//             }\n//             function body() {\n//                 return opts.body && JSON.parse(opts.body);    \n//             }\n//             function newUserId() {\n//                 return users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n//             }\n//         });\n//     }\n// }","map":{"version":3,"sources":["C:/Users/jayes/OneDrive/Desktop/Recibo/Assignment/Frontend/src/_helpers/fake-backend.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { Role } from './'\n\n// export function configureFakeBackend() {\n//     // array in local storage for user records\n//     let users = JSON.parse(localStorage.getItem('users')) || [{ \n//         id: 1,\n//         title: 'Mr',\n//         firstName: 'Joe',\n//         lastName: 'Bloggs',\n//         email: 'joe@bloggs.com',\n//         role: Role.User,\n//         password: 'joe123'\n//     }];\n\n//     // monkey patch fetch to setup fake backend\n//     let realFetch = window.fetch;\n//     window.fetch = function (url, opts) {\n//         return new Promise((resolve, reject) => {\n//             // wrap in timeout to simulate server api call\n//             setTimeout(handleRoute, 500);\n\n//             function handleRoute() {\n//                 const { method } = opts;\n//                 switch (true) {\n//                     case url.endsWith('/users') && method === 'GET':\n//                         return getUsers();\n//                     case url.match(/\\/users\\/\\d+$/) && method === 'GET':\n//                         return getUserById();\n//                     case url.endsWith('/users') && method === 'POST':\n//                         return createUser();\n//                     case url.match(/\\/users\\/\\d+$/) && method === 'PUT':\n//                         return updateUser();\n//                     case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n//                         return deleteUser();\n//                     default:\n//                         // pass through any requests not handled above\n//                         return realFetch(url, opts)\n//                             .then(response => resolve(response))\n//                             .catch(error => reject(error));\n//                 }\n//             }\n\n//             // route functions\n\n//             function getUsers() {\n//                 return ok(users);\n//             }\n\n//             function getUserById() {\n//                 let user = users.find(x => x.id === idFromUrl());\n//                 return ok(user);\n//             }\n    \n//             function createUser() {\n//                 const user = body();\n\n//                 if (users.find(x => x.email === user.email)) {\n//                     return error(`User with the email ${user.email} already exists`);\n//                 }\n\n//                 // assign user id and a few other properties then save\n//                 user.id = newUserId();\n//                 user.dateCreated = new Date().toISOString();\n//                 delete user.confirmPassword;\n//                 users.push(user);\n//                 localStorage.setItem('users', JSON.stringify(users));\n\n//                 return ok();\n//             }\n    \n//             function updateUser() {\n//                 let params = body();\n//                 let user = users.find(x => x.id === idFromUrl());\n\n//                 // only update password if included\n//                 if (!params.password) {\n//                     delete params.password;\n//                 }\n//                 // don't save confirm password\n//                 delete params.confirmPassword;\n\n//                 // update and save user\n//                 Object.assign(user, params);\n//                 localStorage.setItem('users', JSON.stringify(users));\n\n//                 return ok();\n//             }\n    \n//             function deleteUser() {\n//                 users = users.filter(x => x.id !== idFromUrl());\n//                 localStorage.setItem('users', JSON.stringify(users));\n\n//                 return ok();\n//             }\n    \n//             // helper functions\n\n//             function ok(body) {\n//                 resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) });\n//             }\n\n//             function error(message) {\n//                 resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) });\n//             }\n\n//             function idFromUrl() {\n//                 const urlParts = url.split('/');\n//                 return parseInt(urlParts[urlParts.length - 1]);\n//             }\n\n//             function body() {\n//                 return opts.body && JSON.parse(opts.body);    \n//             }\n\n//             function newUserId() {\n//                 return users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n//             }\n//         });\n//     }\n// }"]},"metadata":{},"sourceType":"module"}