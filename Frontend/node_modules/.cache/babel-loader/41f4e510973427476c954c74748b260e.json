{"ast":null,"code":"'use strict';\n\nconst LRU = require('lru-cache');\n\nconst parserCache = new LRU({\n  max: 15000\n});\n\nfunction keyFromFields(type, fields, options, config) {\n  let res = `${type}` + `/${typeof options.nestTables}` + `/${options.nestTables}` + `/${options.rowsAsArray}` + `/${options.supportBigNumbers || config.supportBigNumbers}` + `/${options.bigNumberStrings || config.bigNumberStrings}` + `/${typeof options.typeCast}` + `/${options.timezone || config.timezone}` + `/${options.decimalNumbers}` + `/${options.dateStrings}`;\n\n  for (let i = 0; i < fields.length; ++i) {\n    const field = fields[i];\n    res += `/${field.name}:${field.columnType}:${field.length}:${field.schema}:${field.table}:${field.flags}:${field.characterSet}`;\n  }\n\n  return res;\n}\n\nfunction getParser(type, fields, options, config, compiler) {\n  const key = keyFromFields(type, fields, options, config);\n  let parser = parserCache.get(key);\n\n  if (parser) {\n    return parser;\n  }\n\n  parser = compiler(fields, options, config);\n  parserCache.set(key, parser);\n  return parser;\n}\n\nfunction setMaxCache(max) {\n  parserCache.max = max;\n}\n\nfunction clearCache() {\n  parserCache.reset();\n}\n\nmodule.exports = {\n  getParser: getParser,\n  setMaxCache: setMaxCache,\n  clearCache: clearCache\n};","map":{"version":3,"sources":["C:/Users/jayes/Downloads/react-hook-form-crud-example/src/_helpers/node_modules/mysql2/lib/parsers/parser_cache.js"],"names":["LRU","require","parserCache","max","keyFromFields","type","fields","options","config","res","nestTables","rowsAsArray","supportBigNumbers","bigNumberStrings","typeCast","timezone","decimalNumbers","dateStrings","i","length","field","name","columnType","schema","table","flags","characterSet","getParser","compiler","key","parser","get","set","setMaxCache","clearCache","reset","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AAEA,MAAMC,WAAW,GAAG,IAAIF,GAAJ,CAAQ;AAC1BG,EAAAA,GAAG,EAAE;AADqB,CAAR,CAApB;;AAIA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,MAA9C,EAAsD;AACpD,MAAIC,GAAG,GACJ,GAAEJ,IAAK,EAAR,GACC,IAAG,OAAOE,OAAO,CAACG,UAAW,EAD9B,GAEC,IAAGH,OAAO,CAACG,UAAW,EAFvB,GAGC,IAAGH,OAAO,CAACI,WAAY,EAHxB,GAIC,IAAGJ,OAAO,CAACK,iBAAR,IAA6BJ,MAAM,CAACI,iBAAkB,EAJ1D,GAKC,IAAGL,OAAO,CAACM,gBAAR,IAA4BL,MAAM,CAACK,gBAAiB,EALxD,GAMC,IAAG,OAAON,OAAO,CAACO,QAAS,EAN5B,GAOC,IAAGP,OAAO,CAACQ,QAAR,IAAoBP,MAAM,CAACO,QAAS,EAPxC,GAQC,IAAGR,OAAO,CAACS,cAAe,EAR3B,GASC,IAAGT,OAAO,CAACU,WAAY,EAV1B;;AAWA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,MAAM,CAACa,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtC,UAAME,KAAK,GAAGd,MAAM,CAACY,CAAD,CAApB;AACAT,IAAAA,GAAG,IAAK,IAAGW,KAAK,CAACC,IAAK,IAAGD,KAAK,CAACE,UAAW,IAAGF,KAAK,CAACD,MAAO,IAAGC,KAAK,CAACG,MAAO,IAAGH,KAAK,CAACI,KAAM,IAAGJ,KAAK,CAACK,KAAM,IAAGL,KAAK,CAACM,YAAa,EAA9H;AACD;;AACD,SAAOjB,GAAP;AACD;;AAED,SAASkB,SAAT,CAAmBtB,IAAnB,EAAyBC,MAAzB,EAAiCC,OAAjC,EAA0CC,MAA1C,EAAkDoB,QAAlD,EAA4D;AAC1D,QAAMC,GAAG,GAAGzB,aAAa,CAACC,IAAD,EAAOC,MAAP,EAAeC,OAAf,EAAwBC,MAAxB,CAAzB;AACA,MAAIsB,MAAM,GAAG5B,WAAW,CAAC6B,GAAZ,CAAgBF,GAAhB,CAAb;;AAEA,MAAIC,MAAJ,EAAY;AACV,WAAOA,MAAP;AACD;;AAEDA,EAAAA,MAAM,GAAGF,QAAQ,CAACtB,MAAD,EAASC,OAAT,EAAkBC,MAAlB,CAAjB;AACAN,EAAAA,WAAW,CAAC8B,GAAZ,CAAgBH,GAAhB,EAAqBC,MAArB;AACA,SAAOA,MAAP;AACD;;AAED,SAASG,WAAT,CAAqB9B,GAArB,EAA0B;AACxBD,EAAAA,WAAW,CAACC,GAAZ,GAAkBA,GAAlB;AACD;;AAED,SAAS+B,UAAT,GAAsB;AACpBhC,EAAAA,WAAW,CAACiC,KAAZ;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,SAAS,EAAEA,SADI;AAEfM,EAAAA,WAAW,EAAEA,WAFE;AAGfC,EAAAA,UAAU,EAAEA;AAHG,CAAjB","sourcesContent":["'use strict';\n\nconst LRU = require('lru-cache');\n\nconst parserCache = new LRU({\n  max: 15000\n});\n\nfunction keyFromFields(type, fields, options, config) {\n  let res =\n    `${type}` +\n    `/${typeof options.nestTables}` +\n    `/${options.nestTables}` +\n    `/${options.rowsAsArray}` +\n    `/${options.supportBigNumbers || config.supportBigNumbers}` +\n    `/${options.bigNumberStrings || config.bigNumberStrings}` +\n    `/${typeof options.typeCast}` +\n    `/${options.timezone || config.timezone}` +\n    `/${options.decimalNumbers}` +\n    `/${options.dateStrings}`;\n  for (let i = 0; i < fields.length; ++i) {\n    const field = fields[i];\n    res += `/${field.name}:${field.columnType}:${field.length}:${field.schema}:${field.table}:${field.flags}:${field.characterSet}`;\n  }\n  return res;\n}\n\nfunction getParser(type, fields, options, config, compiler) {\n  const key = keyFromFields(type, fields, options, config);\n  let parser = parserCache.get(key);\n\n  if (parser) {\n    return parser;\n  }\n\n  parser = compiler(fields, options, config);\n  parserCache.set(key, parser);\n  return parser;\n}\n\nfunction setMaxCache(max) {\n  parserCache.max = max;\n}\n\nfunction clearCache() {\n  parserCache.reset();\n}\n\nmodule.exports = {\n  getParser: getParser,\n  setMaxCache: setMaxCache,\n  clearCache: clearCache\n};\n"]},"metadata":{},"sourceType":"module"}