{"ast":null,"code":"// This file was modified by Oracle on July 5, 2021.\n// Errors generated by asynchronous authentication plugins are now being\n// handled and subsequently emitted at the command level.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n'use strict';\n\nconst Packets = require('../packets/index.js');\n\nconst sha256_password = require('../auth_plugins/sha256_password');\n\nconst caching_sha2_password = require('../auth_plugins/caching_sha2_password.js');\n\nconst mysql_native_password = require('../auth_plugins/mysql_native_password.js');\n\nconst standardAuthPlugins = {\n  sha256_password: sha256_password({}),\n  caching_sha2_password: caching_sha2_password({}),\n  mysql_native_password: mysql_native_password({})\n};\n\nfunction warnLegacyAuthSwitch() {\n  console.warn('WARNING! authSwitchHandler api is deprecated, please use new authPlugins api');\n}\n\nfunction authSwitchPluginError(error, command) {\n  // Authentication errors are fatal\n  error.code = 'AUTH_SWITCH_PLUGIN_ERROR';\n  error.fatal = true;\n  command.emit('error', error);\n}\n\nfunction authSwitchRequest(packet, connection, command) {\n  const {\n    pluginName,\n    pluginData\n  } = Packets.AuthSwitchRequest.fromPacket(packet);\n  let authPlugin = connection.config.authPlugins && connection.config.authPlugins[pluginName]; // legacy plugin api don't allow to override mysql_native_password\n  // if pluginName is mysql_native_password it's using standard auth4.1 auth\n\n  if (connection.config.authSwitchHandler && pluginName !== 'mysql_native_password') {\n    const legacySwitchHandler = connection.config.authSwitchHandler;\n    warnLegacyAuthSwitch();\n    legacySwitchHandler({\n      pluginName,\n      pluginData\n    }, (err, data) => {\n      if (err) {\n        return authSwitchPluginError(err, command);\n      }\n\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    });\n    return;\n  }\n\n  if (!authPlugin) {\n    authPlugin = standardAuthPlugins[pluginName];\n  }\n\n  if (!authPlugin) {\n    throw new Error(`Server requests authentication using unknown plugin ${pluginName}. See ${'TODO: add plugins doco here'} on how to configure or author authentication plugins.`);\n  }\n\n  connection._authPlugin = authPlugin({\n    connection,\n    command\n  });\n  Promise.resolve(connection._authPlugin(pluginData)).then(data => {\n    if (data) {\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    }\n  }).catch(err => {\n    authSwitchPluginError(err, command);\n  });\n}\n\nfunction authSwitchRequestMoreData(packet, connection, command) {\n  const {\n    data\n  } = Packets.AuthSwitchRequestMoreData.fromPacket(packet);\n\n  if (connection.config.authSwitchHandler) {\n    const legacySwitchHandler = connection.config.authSwitchHandler;\n    warnLegacyAuthSwitch();\n    legacySwitchHandler({\n      pluginData: data\n    }, (err, data) => {\n      if (err) {\n        return authSwitchPluginError(err, command);\n      }\n\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    });\n    return;\n  }\n\n  if (!connection._authPlugin) {\n    throw new Error('AuthPluginMoreData received but no auth plugin instance found');\n  }\n\n  Promise.resolve(connection._authPlugin(data)).then(data => {\n    if (data) {\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    }\n  }).catch(err => {\n    authSwitchPluginError(err, command);\n  });\n}\n\nmodule.exports = {\n  authSwitchRequest,\n  authSwitchRequestMoreData\n};","map":{"version":3,"sources":["C:/Users/jayes/Downloads/react-hook-form-crud-example/src/_helpers/node_modules/mysql2/lib/commands/auth_switch.js"],"names":["Packets","require","sha256_password","caching_sha2_password","mysql_native_password","standardAuthPlugins","warnLegacyAuthSwitch","console","warn","authSwitchPluginError","error","command","code","fatal","emit","authSwitchRequest","packet","connection","pluginName","pluginData","AuthSwitchRequest","fromPacket","authPlugin","config","authPlugins","authSwitchHandler","legacySwitchHandler","err","data","writePacket","AuthSwitchResponse","toPacket","Error","_authPlugin","Promise","resolve","then","catch","authSwitchRequestMoreData","AuthSwitchRequestMoreData","module","exports"],"mappings":"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","sourcesContent":["// This file was modified by Oracle on July 5, 2021.\n// Errors generated by asynchronous authentication plugins are now being\n// handled and subsequently emitted at the command level.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n'use strict';\n\nconst Packets = require('../packets/index.js');\nconst sha256_password = require('../auth_plugins/sha256_password');\nconst caching_sha2_password = require('../auth_plugins/caching_sha2_password.js');\nconst mysql_native_password = require('../auth_plugins/mysql_native_password.js');\n\nconst standardAuthPlugins = {\n  sha256_password: sha256_password({}),\n  caching_sha2_password: caching_sha2_password({}),\n  mysql_native_password: mysql_native_password({})\n};\n\nfunction warnLegacyAuthSwitch() {\n  console.warn(\n    'WARNING! authSwitchHandler api is deprecated, please use new authPlugins api'\n  );\n}\n\nfunction authSwitchPluginError(error, command) {\n  // Authentication errors are fatal\n  error.code = 'AUTH_SWITCH_PLUGIN_ERROR';\n  error.fatal = true;\n\n  command.emit('error', error);\n}\n\nfunction authSwitchRequest(packet, connection, command) {\n  const { pluginName, pluginData } = Packets.AuthSwitchRequest.fromPacket(\n    packet\n  );\n  let authPlugin =\n    connection.config.authPlugins && connection.config.authPlugins[pluginName];\n\n  // legacy plugin api don't allow to override mysql_native_password\n  // if pluginName is mysql_native_password it's using standard auth4.1 auth\n  if (\n    connection.config.authSwitchHandler &&\n    pluginName !== 'mysql_native_password'\n  ) {\n    const legacySwitchHandler = connection.config.authSwitchHandler;\n    warnLegacyAuthSwitch();\n    legacySwitchHandler({ pluginName, pluginData }, (err, data) => {\n      if (err) {\n        return authSwitchPluginError(err, command);\n      }\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    });\n    return;\n  }\n  if (!authPlugin) {\n    authPlugin = standardAuthPlugins[pluginName];\n  }\n  if (!authPlugin) {\n    throw new Error(\n      `Server requests authentication using unknown plugin ${pluginName}. See ${'TODO: add plugins doco here'} on how to configure or author authentication plugins.`\n    );\n  }\n  connection._authPlugin = authPlugin({ connection, command });\n  Promise.resolve(connection._authPlugin(pluginData)).then(data => {\n    if (data) {\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    }\n  }).catch(err => {\n    authSwitchPluginError(err, command);\n  });\n}\n\nfunction authSwitchRequestMoreData(packet, connection, command) {\n  const { data } = Packets.AuthSwitchRequestMoreData.fromPacket(packet);\n\n  if (connection.config.authSwitchHandler) {\n    const legacySwitchHandler = connection.config.authSwitchHandler;\n    warnLegacyAuthSwitch();\n    legacySwitchHandler({ pluginData: data }, (err, data) => {\n      if (err) {\n        return authSwitchPluginError(err, command);\n      }\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    });\n    return;\n  }\n\n  if (!connection._authPlugin) {\n    throw new Error(\n      'AuthPluginMoreData received but no auth plugin instance found'\n    );\n  }\n  Promise.resolve(connection._authPlugin(data)).then(data => {\n    if (data) {\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    }\n  }).catch(err => {\n    authSwitchPluginError(err, command);\n  });\n}\n\nmodule.exports = {\n  authSwitchRequest,\n  authSwitchRequestMoreData\n};\n"]},"metadata":{},"sourceType":"module"}