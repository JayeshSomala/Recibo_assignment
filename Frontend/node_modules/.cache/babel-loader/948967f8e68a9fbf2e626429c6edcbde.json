{"ast":null,"code":"// import React, { useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import { useForm } from \"react-hook-form\";\n// import { yupResolver } from '@hookform/resolvers/yup';\n// import * as Yup from 'yup';\n// import { alertService, productService } from '../_services';\n// function AddEdit({ history, match }) {\n//     const { id } = match.params;\n//     const isAddMode = !id;\n//     // form validation rules \n//     const validationSchema = Yup.object().shape({\n//         Name: Yup.string()\n//             .required('Name is required'),\n//         Cost: Yup.number()\n//             .required('Cost is required'),\n//     });\n//     // functions to build form returned by useForm() hook\n//     const { register, handleSubmit, reset, setValue, errors, formState } = useForm({\n//         resolver: yupResolver(validationSchema)\n//     });\n//     function onSubmit(data) {\n//         return isAddMode\n//             ? createproduct(data)\n//             : updateproduct(id, data);\n//     }\n//     function createproduct(data) {\n//         return productService.create(data)\n//             .then(() => {\n//                 alertService.success('Product added', { keepAfterRouteChange: true });\n//                 history.push('.');\n//             })\n//             .catch(alertService.error);\n//     }\n//     function updateproduct(id, data) {\n//         return productService.update(id, data)\n//             .then(() => {\n//                 alertService.success('Product updated', { keepAfterRouteChange: true });\n//                 history.push('..');\n//             })\n//             .catch(alertService.error);\n//     }\n//     useEffect(() => {\n//         if (!isAddMode) {\n//             // get product and set form fields\n//             productService.getById(id).then(product => {\n//                 const fields = ['Name', 'Cost'];\n//                 fields.forEach(field => setValue(field, product[field]));\n//             });\n//         }\n//     }, []);\n//     return (\n//         <form onSubmit={handleSubmit(onSubmit)} onReset={reset}>\n//             <h1>{isAddMode ? 'Add product' : 'Edit product'}</h1>\n//             <div className=\"form-row\">\n//                 <div className=\"form-group col-5\">\n//                     <label>Product Name</label>\n//                     <input Name=\"Name\" type=\"text\" ref={register} className={`form-control ${errors.firstName ? 'is-invalid' : ''}`} />\n//                     <div className=\"invalid-feedback\">{errors.Name?.message}</div>\n//                 </div>\n//                 <div className=\"form-group col-5\">\n//                     <label>Price</label>\n//                     <input Name=\"Cost\" type=\"number\" ref={register} className={`form-control ${errors.Cost ? 'is-invalid' : ''}`} />\n//                     <div className=\"invalid-feedback\">{errors.Cost?.message}</div>\n//                 </div>\n//             </div>\n//             <div className=\"form-group\">\n//                 <button type=\"submit\" disabled={formState.isSubmitting} className=\"btn btn-primary\">\n//                     {formState.isSubmitting && <span className=\"spinner-border spinner-border-sm mr-1\"></span>}\n//                     Save\n//                 </button>\n//                 <Link to={isAddMode ? '.' : '..'} className=\"btn btn-link\">Cancel</Link>\n//             </div>\n//         </form>\n//     );\n// }\n// export { AddEdit };","map":{"version":3,"sources":["C:/Users/jayes/OneDrive/Desktop/Recibo/react-hook-form-crud-example/src/products/AddEdit.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import { useForm } from \"react-hook-form\";\n// import { yupResolver } from '@hookform/resolvers/yup';\n// import * as Yup from 'yup';\n\n// import { alertService, productService } from '../_services';\n\n// function AddEdit({ history, match }) {\n//     const { id } = match.params;\n//     const isAddMode = !id;\n\n//     // form validation rules \n//     const validationSchema = Yup.object().shape({\n//         Name: Yup.string()\n//             .required('Name is required'),\n//         Cost: Yup.number()\n//             .required('Cost is required'),\n//     });\n\n//     // functions to build form returned by useForm() hook\n//     const { register, handleSubmit, reset, setValue, errors, formState } = useForm({\n//         resolver: yupResolver(validationSchema)\n//     });\n\n//     function onSubmit(data) {\n//         return isAddMode\n//             ? createproduct(data)\n//             : updateproduct(id, data);\n//     }\n\n//     function createproduct(data) {\n//         return productService.create(data)\n//             .then(() => {\n//                 alertService.success('Product added', { keepAfterRouteChange: true });\n//                 history.push('.');\n//             })\n//             .catch(alertService.error);\n//     }\n\n//     function updateproduct(id, data) {\n//         return productService.update(id, data)\n//             .then(() => {\n//                 alertService.success('Product updated', { keepAfterRouteChange: true });\n//                 history.push('..');\n//             })\n//             .catch(alertService.error);\n//     }\n\n//     useEffect(() => {\n//         if (!isAddMode) {\n//             // get product and set form fields\n//             productService.getById(id).then(product => {\n//                 const fields = ['Name', 'Cost'];\n//                 fields.forEach(field => setValue(field, product[field]));\n//             });\n//         }\n//     }, []);\n\n//     return (\n//         <form onSubmit={handleSubmit(onSubmit)} onReset={reset}>\n//             <h1>{isAddMode ? 'Add product' : 'Edit product'}</h1>\n//             <div className=\"form-row\">\n//                 <div className=\"form-group col-5\">\n//                     <label>Product Name</label>\n//                     <input Name=\"Name\" type=\"text\" ref={register} className={`form-control ${errors.firstName ? 'is-invalid' : ''}`} />\n//                     <div className=\"invalid-feedback\">{errors.Name?.message}</div>\n//                 </div>\n//                 <div className=\"form-group col-5\">\n//                     <label>Price</label>\n//                     <input Name=\"Cost\" type=\"number\" ref={register} className={`form-control ${errors.Cost ? 'is-invalid' : ''}`} />\n//                     <div className=\"invalid-feedback\">{errors.Cost?.message}</div>\n//                 </div>\n//             </div>\n//             <div className=\"form-group\">\n//                 <button type=\"submit\" disabled={formState.isSubmitting} className=\"btn btn-primary\">\n//                     {formState.isSubmitting && <span className=\"spinner-border spinner-border-sm mr-1\"></span>}\n//                     Save\n//                 </button>\n//                 <Link to={isAddMode ? '.' : '..'} className=\"btn btn-link\">Cancel</Link>\n//             </div>\n//         </form>\n//     );\n// }\n\n// export { AddEdit };"]},"metadata":{},"sourceType":"module"}