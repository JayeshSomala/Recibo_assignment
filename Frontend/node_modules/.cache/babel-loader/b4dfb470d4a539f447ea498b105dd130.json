{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayes\\\\OneDrive\\\\Desktop\\\\Recibo\\\\Assignment\\\\Frontend\\\\src\\\\order\\\\AddEdit.jsx\";\n// import React, { useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import { useForm } from \"react-hook-form\";\n// import { yupResolver } from '@hookform/resolvers/yup';\n// import * as Yup from 'yup';\n// import { alertService, orderService } from '../_services';\n// function AddEdit({ history, match }) {\n//     const { id } = match.params;\n//     const isAddMode = !id;\n//     // form validation rules \n//     const validationSchema = Yup.object().shape({\n//         user: Yup.string()\n//             .required('User is required'),\n//         Product: Yup.number()\n//             .required('Product is required'),\n//         outlet: Yup.string()\n//             .required('Order is required'),\n//     });\n//     // functions to build form returned by useForm() hook\n//     const { register, handleSubmit, reset, setValue, errors, formState } = useForm({\n//         resolver: yupResolver(validationSchema)\n//     });\n//     function onSubmit(data) {\n//         return isAddMode\n//             ? createorder(data)\n//             : updateorder(id, data);\n//     }\n//     function createorder(data) {\n//         return orderService.create(data)\n//             .then(() => {\n//                 alertService.success('Order added', { keepAfterRouteChange: true });\n//                 history.push('.');\n//             })\n//             .catch(alertService.error);\n//     }\n//     function updateorder(id, data) {\n//         return orderService.update(id, data)\n//             .then(() => {\n//                 alertService.success('Order updated', { keepAfterRouteChange: true });\n//                 history.push('..');\n//             })\n//             .catch(alertService.error);\n//     }\n//     useEffect(() => {\n//         if (!isAddMode) {\n//             // get order and set form fields\n//             orderService.getById(id).then(order => {\n//                 const fields = ['Name', 'Phone', 'address'];\n//                 fields.forEach(field => setValue(field, order[field]));\n//             });\n//         }\n//     }, []);\n//     return (\n//         <form onSubmit={handleSubmit(onSubmit)} onReset={reset}>\n//             <h1>{isAddMode ? 'Add order' : 'Edit order'}</h1>\n//             <div className=\"form-row\">\n//                 <div className=\"form-group col-5\">\n//                     <label>User</label>\n//                     <input Name=\"Name\" type=\"text\" ref={register} className={`form-control ${errors.firstName ? 'is-invalid' : ''}`} />\n//                     <div className=\"invalid-feedback\">{errors.Name?.message}</div>\n//                 </div>\n//                 <div className=\"form-group col-5\">\n//                     <label>Phone Phone</label>\n//                     <input Name=\"Phone\" type=\"Phone\" ref={register} className={`form-control ${errors.Phone ? 'is-invalid' : ''}`} />\n//                     <div className=\"invalid-feedback\">{errors.Phone?.message}</div>\n//                 </div>\n//                 <div className=\"form-group col-5\">\n//                     <label>Address</label>\n//                     <input Name=\"Address\" type=\"text\" ref={register} className={`form-control ${errors.Address ? 'is-invalid' : ''}`} />\n//                     <div className=\"invalid-feedback\">{errors.Address?.message}</div>\n//                 </div>\n//             </div>\n//             <div className=\"form-group\">\n//                 <button type=\"submit\" disabled={formState.isSubmitting} className=\"btn btn-primary\">\n//                     {formState.isSubmitting && <span className=\"spinner-border spinner-border-sm mr-1\"></span>}\n//                     Save\n//                 </button>\n//                 <Link to={isAddMode ? '.' : '..'} className=\"btn btn-link\">Cancel</Link>\n//             </div>\n//         </form>\n//     );\n// }\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddEdit extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      users: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3000/users').then(response => response.json()).then(users => this.setState({\n      users: users\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p1\", {\n        children: \" Select User:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"-select user-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), this.state.users.map(users => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"users\",\n          children: users.state_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 49\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }, this);\n  }\n\n}\n\nexport { AddEdit };","map":{"version":3,"sources":["C:/Users/jayes/OneDrive/Desktop/Recibo/Assignment/Frontend/src/order/AddEdit.jsx"],"names":["React","AddEdit","Component","state","users","componentDidMount","fetch","then","response","json","setState","render","map","state_name"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;;AACA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAqC;AAAA;AAAA;AAAA,SAEjCC,KAFiC,GAE3B;AAEFC,MAAAA,KAAK,EAAC;AAFJ,KAF2B;AAAA;;AAOjCC,EAAAA,iBAAiB,GACjB;AACKC,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EADhB,EAECF,IAFD,CAEMH,KAAK,IAAE,KAAKM,QAAL,CAAc;AAACN,MAAAA,KAAK,EAACA;AAAP,KAAd,CAFb;AAGJ;;AAEDO,EAAAA,MAAM,GACN;AACI,wBAAM;AAAA,8BACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADI,eAEF;AAAA,gCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,EAIQ,KAAKR,KAAL,CAAWC,KAAX,CAAiBQ,GAAjB,CAAqBR,KAAK,iBAAE;AAAQ,UAAA,KAAK,EAAC,OAAd;AAAA,oBAAuBA,KAAK,CAACS;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAA5B,CAJR;AAAA;AAAA;AAAA;AAAA;AAAA,cAFE,eASO;AAAA;AAAA;AAAA;AAAA,cATP;AAAA;AAAA;AAAA;AAAA;AAAA,YAAN;AAYC;;AA5B4B;;AA8BrC,SAASZ,OAAT","sourcesContent":["// import React, { useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import { useForm } from \"react-hook-form\";\n// import { yupResolver } from '@hookform/resolvers/yup';\n// import * as Yup from 'yup';\n\n// import { alertService, orderService } from '../_services';\n\n// function AddEdit({ history, match }) {\n//     const { id } = match.params;\n//     const isAddMode = !id;\n\n//     // form validation rules \n//     const validationSchema = Yup.object().shape({\n//         user: Yup.string()\n//             .required('User is required'),\n//         Product: Yup.number()\n//             .required('Product is required'),\n//         outlet: Yup.string()\n//             .required('Order is required'),\n//     });\n\n//     // functions to build form returned by useForm() hook\n//     const { register, handleSubmit, reset, setValue, errors, formState } = useForm({\n//         resolver: yupResolver(validationSchema)\n//     });\n\n//     function onSubmit(data) {\n//         return isAddMode\n//             ? createorder(data)\n//             : updateorder(id, data);\n//     }\n\n//     function createorder(data) {\n//         return orderService.create(data)\n//             .then(() => {\n//                 alertService.success('Order added', { keepAfterRouteChange: true });\n//                 history.push('.');\n//             })\n//             .catch(alertService.error);\n//     }\n\n//     function updateorder(id, data) {\n//         return orderService.update(id, data)\n//             .then(() => {\n//                 alertService.success('Order updated', { keepAfterRouteChange: true });\n//                 history.push('..');\n//             })\n//             .catch(alertService.error);\n//     }\n\n//     useEffect(() => {\n//         if (!isAddMode) {\n//             // get order and set form fields\n//             orderService.getById(id).then(order => {\n//                 const fields = ['Name', 'Phone', 'address'];\n//                 fields.forEach(field => setValue(field, order[field]));\n//             });\n//         }\n//     }, []);\n\n//     return (\n//         <form onSubmit={handleSubmit(onSubmit)} onReset={reset}>\n//             <h1>{isAddMode ? 'Add order' : 'Edit order'}</h1>\n//             <div className=\"form-row\">\n//                 <div className=\"form-group col-5\">\n//                     <label>User</label>\n//                     <input Name=\"Name\" type=\"text\" ref={register} className={`form-control ${errors.firstName ? 'is-invalid' : ''}`} />\n//                     <div className=\"invalid-feedback\">{errors.Name?.message}</div>\n//                 </div>\n//                 <div className=\"form-group col-5\">\n//                     <label>Phone Phone</label>\n//                     <input Name=\"Phone\" type=\"Phone\" ref={register} className={`form-control ${errors.Phone ? 'is-invalid' : ''}`} />\n//                     <div className=\"invalid-feedback\">{errors.Phone?.message}</div>\n//                 </div>\n//                 <div className=\"form-group col-5\">\n//                     <label>Address</label>\n//                     <input Name=\"Address\" type=\"text\" ref={register} className={`form-control ${errors.Address ? 'is-invalid' : ''}`} />\n//                     <div className=\"invalid-feedback\">{errors.Address?.message}</div>\n//                 </div>\n//             </div>\n//             <div className=\"form-group\">\n//                 <button type=\"submit\" disabled={formState.isSubmitting} className=\"btn btn-primary\">\n//                     {formState.isSubmitting && <span className=\"spinner-border spinner-border-sm mr-1\"></span>}\n//                     Save\n//                 </button>\n//                 <Link to={isAddMode ? '.' : '..'} className=\"btn btn-link\">Cancel</Link>\n//             </div>\n//         </form>\n//     );\n// }\nimport React from 'react';\nclass AddEdit extends React.Component{\n\n    state={\n    \n        users:[]\n    }\n    \n    componentDidMount()\n    {\n         fetch('http://localhost:3000/users')\n         .then(response=>response.json())\n         .then(users=>this.setState({users:users}))\n    }\n    \n    render()\n    {\n        return<div>\n          <p1> Select User:</p1>\n            <select>\n            <option>-select user-</option>\n                {\n                   \n                    this.state.users.map(users=><option value=\"users\">{users.state_name}</option>)\n                   \n                }\n            </select><br></br>\n        \n        </div>\n        }\n        }\nexport { AddEdit };"]},"metadata":{},"sourceType":"module"}