{"ast":null,"code":"import { Role } from './';\nexport function configureFakeBackend() {\n  // array in local storage for user records\n  let users = JSON.parse(localStorage.getItem('users')) || [{\n    id: 1,\n    title: 'Mr',\n    firstName: 'Joe',\n    lastName: 'Bloggs',\n    email: 'joe@bloggs.com',\n    role: Role.User,\n    password: 'joe123'\n  }]; // monkey patch fetch to setup fake backend\n\n  let realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(handleRoute, 500);\n\n      function handleRoute() {\n        const {\n          method\n        } = opts;\n\n        switch (true) {\n          case url.endsWith('/users') && method === 'GET':\n            return getUsers();\n\n          case url.match(/\\/users\\/\\d+$/) && method === 'GET':\n            return getUserById();\n\n          case url.endsWith('/users') && method === 'POST':\n            return createUser();\n\n          case url.match(/\\/users\\/\\d+$/) && method === 'PUT':\n            return updateUser();\n\n          case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n            return deleteUser();\n\n          default:\n            // pass through any requests not handled above\n            return realFetch(url, opts).then(response => resolve(response)).catch(error => reject(error));\n        }\n      } // route functions\n\n\n      function getUsers() {\n        return ok(users);\n      }\n\n      function getUserById() {\n        let user = users.find(x => x.id === idFromUrl());\n        return ok(user);\n      }\n\n      function createUser() {\n        const user = body();\n\n        if (users.find(x => x.email === user.email)) {\n          return error(`User with the email ${user.email} already exists`);\n        } // assign user id and a few other properties then save\n\n\n        user.id = newUserId();\n        user.dateCreated = new Date().toISOString();\n        delete user.confirmPassword;\n        users.push(user);\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      }\n\n      function updateUser() {\n        let params = body();\n        let user = users.find(x => x.id === idFromUrl()); // only update password if included\n\n        if (!params.password) {\n          delete params.password;\n        } // don't save confirm password\n\n\n        delete params.confirmPassword; // update and save user\n\n        Object.assign(user, params);\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      }\n\n      function deleteUser() {\n        users = users.filter(x => x.id !== idFromUrl());\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      } // helper functions\n\n\n      function ok(body) {\n        resolve({\n          ok: true,\n          text: () => Promise.resolve(JSON.stringify(body))\n        });\n      }\n\n      function error(message) {\n        resolve({\n          status: 400,\n          text: () => Promise.resolve(JSON.stringify({\n            message\n          }))\n        });\n      }\n\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n\n      function body() {\n        return opts.body && JSON.parse(opts.body);\n      }\n\n      function newUserId() {\n        return users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n      }\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/jayes/Downloads/react-hook-form-crud-example/src/_helpers/fake-backend.js"],"names":["Role","configureFakeBackend","users","JSON","parse","localStorage","getItem","id","title","firstName","lastName","email","role","User","password","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","handleRoute","method","endsWith","getUsers","match","getUserById","createUser","updateUser","deleteUser","then","response","catch","error","ok","user","find","x","idFromUrl","body","newUserId","dateCreated","Date","toISOString","confirmPassword","push","setItem","stringify","params","Object","assign","filter","text","message","status","urlParts","split","parseInt","length","Math","max","map"],"mappings":"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","sourcesContent":["import { Role } from './'\n\nexport function configureFakeBackend() {\n    // array in local storage for user records\n    let users = JSON.parse(localStorage.getItem('users')) || [{ \n        id: 1,\n        title: 'Mr',\n        firstName: 'Joe',\n        lastName: 'Bloggs',\n        email: 'joe@bloggs.com',\n        role: Role.User,\n        password: 'joe123'\n    }];\n\n    // monkey patch fetch to setup fake backend\n    let realFetch = window.fetch;\n    window.fetch = function (url, opts) {\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            setTimeout(handleRoute, 500);\n\n            function handleRoute() {\n                const { method } = opts;\n                switch (true) {\n                    case url.endsWith('/users') && method === 'GET':\n                        return getUsers();\n                    case url.match(/\\/users\\/\\d+$/) && method === 'GET':\n                        return getUserById();\n                    case url.endsWith('/users') && method === 'POST':\n                        return createUser();\n                    case url.match(/\\/users\\/\\d+$/) && method === 'PUT':\n                        return updateUser();\n                    case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n                        return deleteUser();\n                    default:\n                        // pass through any requests not handled above\n                        return realFetch(url, opts)\n                            .then(response => resolve(response))\n                            .catch(error => reject(error));\n                }\n            }\n\n            // route functions\n\n            function getUsers() {\n                return ok(users);\n            }\n\n            function getUserById() {\n                let user = users.find(x => x.id === idFromUrl());\n                return ok(user);\n            }\n    \n            function createUser() {\n                const user = body();\n\n                if (users.find(x => x.email === user.email)) {\n                    return error(`User with the email ${user.email} already exists`);\n                }\n\n                // assign user id and a few other properties then save\n                user.id = newUserId();\n                user.dateCreated = new Date().toISOString();\n                delete user.confirmPassword;\n                users.push(user);\n                localStorage.setItem('users', JSON.stringify(users));\n\n                return ok();\n            }\n    \n            function updateUser() {\n                let params = body();\n                let user = users.find(x => x.id === idFromUrl());\n\n                // only update password if included\n                if (!params.password) {\n                    delete params.password;\n                }\n                // don't save confirm password\n                delete params.confirmPassword;\n\n                // update and save user\n                Object.assign(user, params);\n                localStorage.setItem('users', JSON.stringify(users));\n\n                return ok();\n            }\n    \n            function deleteUser() {\n                users = users.filter(x => x.id !== idFromUrl());\n                localStorage.setItem('users', JSON.stringify(users));\n\n                return ok();\n            }\n    \n            // helper functions\n\n            function ok(body) {\n                resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) });\n            }\n\n            function error(message) {\n                resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) });\n            }\n\n            function idFromUrl() {\n                const urlParts = url.split('/');\n                return parseInt(urlParts[urlParts.length - 1]);\n            }\n\n            function body() {\n                return opts.body && JSON.parse(opts.body);    \n            }\n\n            function newUserId() {\n                return users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n            }\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}